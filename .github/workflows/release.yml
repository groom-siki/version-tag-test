name: production-release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 프로덕션 배포 TAG 버전 업 (production branch 확인, 아니면 실행 안됨)
        required: true
        default: patch
        type: choice
        options:
          - minor
          - patch

jobs:
  verify:
    name: 프로뎍션 레포지토리 체크
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest

    steps:
      - name: 프로덕션 레포지토리 확인
        run: exit 0

  init:
    name: 기존 태그 버전 확인
    needs: verify
    runs-on: ubuntu-latest

    steps:
      - name: GITHUB ACTIONS 체크아웃
        uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - name: TAG 버전 업 타입 확인
        run: |
          echo "배포 태그 버전 업 타입: ${{ inputs.version }}"
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV

      - name: 최신 태그 버전 추출 및 환경변수 설정
        id: tag
        run: |
          git fetch --all --tags
          echo "LATEST TAG VERSION: $(git tag --list --sort=-v:refname | head -1 | sed 's/v//g')"
          echo "GIT_TAG=`echo $(git tag --list --sort=-v:refname | head -1 | sed 's/v//g')`" >> $GITHUB_ENV
          echo ${{ env.GIT_TAG }}

    outputs:
      current_tag: ${{ env.GIT_TAG }}
      version: ${{ env.VERSION }}

  calculate:
    if: github.ref == 'refs/heads/production'
    needs: init
    name: 다음 태그 버전 계산
    runs-on: ubuntu-latest

    env:
      TAG: ${{ needs.init.outputs.current_tag }}
      VERSION: ${{ needs.init.outputs.version }}

    steps:
      - name: MAJOR/MINOR/PATCH 버전 값 추출
        run: |
          CUR_TAG=${{ env.TAG }}
          CUR_MAJOR_NUMBER=`echo $CUR_TAG | cut -d '.' -f1`
          CUR_MINOR_NUMBER=`echo $CUR_TAG | cut -d '.' -f2`
          CUR_PATCH_NUMBER=`echo $CUR_TAG | cut -d '.' -f3`
          echo NEXT_MAJOR_NUMBER=$CUR_MAJOR_NUMBER >> $GITHUB_ENV
          echo NEXT_MINOR_NUMBER=$CUR_MINOR_NUMBER >> $GITHUB_ENV
          echo NEXT_PATCH_NUMBER=$CUR_PATCH_NUMBER >> $GITHUB_ENV

      - name: MINOR - 다음 버전 계산
        if: ${{ inputs.version == 'minor' }}
        run: |
          CUR_MINOR_NUMBER=${{ env.NEXT_MINOR_NUMBER }}
          NEXT_MINOR_NUMBER=`expr $CUR_MINOR_NUMBER + 1`
          echo "NEXT_MINOR_NUMBER=$NEXT_MINOR_NUMBER" >> $GITHUB_ENV
          echo "NEXT_PATCH_NUMBER=0" >> $GITHUB_ENV
          echo "마이너 버전 업: $CUR_MINOR_NUMBER ---> $NEXT_MINOR_NUMBER"

      - name: PATCH - 다음 버전 계산
        if: ${{ inputs.version == 'patch' }}
        run: |
          CUR_PATCH_NUMBER=${{ env.NEXT_PATCH_NUMBER }}
          NEXT_PATCH_NUMBER=`expr $CUR_PATCH_NUMBER + 1`
          echo "NEXT_PATCH_NUMBER=$NEXT_PATCH_NUMBER" >> $GITHUB_ENV
          echo "패치 버전 업: $CUR_PATCH_NUMBER ---> $NEXT_PATCH_NUMBER"

    outputs:
      next_major: ${{ env.NEXT_MAJOR_NUMBER }}
      next_minor: ${{ env.NEXT_MINOR_NUMBER }}
      next_patch: ${{ env.NEXT_PATCH_NUMBER }}
      tag: ${{ env.TAG }}

  build:
    if: github.ref == 'refs/heads/production'
    name: 새 태그 버전 배포
    runs-on: ubuntu-latest
    needs: calculate
    env:
      NEXT_MAJOR: ${{ needs.calculate.outputs.next_major }}
      NEXT_MINOR: ${{ needs.calculate.outputs.next_minor }}
      NEXT_PATCH: ${{ needs.calculate.outputs.next_patch }}
      TAG: ${{ needs.calculate.outputs.tag }}

    steps:
      - name: GITHUB ACTIONS 체크아웃
        uses: actions/checkout@v3
        with:
          ref: production
          fetch-depth: 10

      - name: 새 태그 및 저자 설정
        run: |
          git config --global user.name 'croquiscom-pim'
          git config --global user.email 'admin@croquis.com'
          GIT_NEXT_TAG="v${{ env.NEXT_MAJOR }}.${{ env.NEXT_MINOR }}.${{ env.NEXT_PATCH }}"
          AUTHOR="${{ github.event.sender.login }}<${{ github.event.sender.id }}+${{ github.event.sender.login }}@users.noreply.github.com>"
          echo "GIT_NEXT_TAG=$GIT_NEXT_TAG" >> $GITHUB_ENV
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV

      - name: 다음 버전 RELEASE
        run: |
          git tag ${{ env.GIT_NEXT_TAG }}
          git push origin ${{ env.GIT_NEXT_TAG }}
          echo "NEXT VERSION ${{ env.GIT_NEXT_TAG }} RELEASE COMPLETE BY ${{ env.AUTHOR }}"